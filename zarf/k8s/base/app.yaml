apiVersion: v1
kind: ResourceQuota
metadata:
  name: cpu-quota
spec:
  hard: # Docker needs to be configured at these minimums.
    limits.cpu: "4000m"   # Up to 4 full cores
    requests.cpu: "4000m" # Up to 4 full cores
    #limits.memory: 4Gi
    #requests.memory: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sales-pod # Base POD name
spec:
  selector:
    matchLabels:
      app: sales # Selector for POD name search.
  replicas: 1
  strategy: {}
  template:
    metadata:
      labels:
        app: sales
    spec:
      dnsPolicy: ClusterFirstWithHostNet
      hostNetwork: true
      terminationGracePeriodSeconds: 60
      containers:
      - name: zipkin
        image: openzipkin/zipkin:2.23
        resources:
          limits:
            cpu: "500m" # Up to 1/2 full core
          requests:
            cpu: "250m" # Use 1/4 full core
        ports:
        - name: zipkin
          containerPort: 9411
      - name: sales-api
        image: sales-api-amd64:1.0
        resources:
          limits:
            cpu: "2000m" # Up to 2 full cores
          requests:
            cpu: "1000m" # Use 1 full cores
        env:
        - name: SALES_DB_HOST
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: db_host
        - name: SALES_ZIPKIN_REPORTER_URI
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: zipkin_reporter_uri
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBERNETES_PODNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: KUBERNETES_NAMESPACE_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: KUBERNETES_NODENAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        ports:
        - name: sales-api
          containerPort: 3000
        - name: sales-api-debug
          containerPort: 4000
        readinessProbe: # readiness probes mark the service available to accept traffic.
          httpGet:
            path: /debug/readiness
            port: 4000
          initialDelaySeconds: 15
          periodSeconds: 15
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 2
        livenessProbe: # liveness probes mark the service alive or dead (to be restarted).
          httpGet:
            path: /debug/liveness
            port: 4000
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 2
      - name: metrics
        image: metrics-amd64:1.0
        resources:
          limits:
            cpu: "500m" # Up to 1/2 full core
          requests:
            cpu: "250m" # Use 1/4 full core
        env:
        - name: METRICS_COLLECT_FROM
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: collect_from
        ports:
        - name: metrics
          containerPort: 3001
        - name: metrics-debug
          containerPort: 4001
---
apiVersion: v1
kind: Service
metadata:
  name: sales-service
spec:
  type: ClusterIP
  selector:
    app: sales
  ports:
  - name: zipkin
    port: 9411
    targetPort: zipkin
  - name: sales-api
    port: 3000
    targetPort: sales-api
  - name: sales-api-debug
    port: 4000
    targetPort: sales-api-debug
  - name: metrics
    port: 3001
    targetPort: metrics
  - name: metrics-debug
    port: 4001
    targetPort: metrics-debug
